package users

import (
	"rowers/internal/db"
	"fmt"
	c "rowers/templates/components"
	f "rowers/templates/forms"
	"rowers/templates/utils"
)

script buildChart(userID int64, weights []db.Weight) {
	if (!weights) { return; }

	const jsweights = weights.reverse()
	const ctx = document.getElementById(`weights_chart_${userID}`);

	new Chart(ctx, {
		type: 'line',
		data: {
			labels: jsweights.map(w => dayjs(w.date).format('DD/MM/YYYY')),
			datasets: [{
				label: 'Historico de pesos',
				data: jsweights.map(w => w.weight),
				borderWidth: 1
			}]
		}
	});
}

// TODO: loading view
templ UserWeights(userID int64, weights []db.Weight) {
	<div id="user_weights" class="px-3 pt-4">
		if len(weights) > 0 {
			<canvas id={ fmt.Sprintf("weights_chart_%d", userID) } class="max-h-100"></canvas>
			<div class="mt-4 text-center">
				@UserWeightsTable(userID, weights)
			</div>
		} else {
			<div class="text-center">Todavía no hay datos</div>
		}
		<div class="mt-4">
			@c.Collapsible(fmt.Sprintf("weights_form_%d", userID), "Añadir Peso") {
				@f.WeightForm(userID)
			}
		</div>
		@buildChart(userID, weights)
	</div>
}

templ UserWeightsTable(userID int64, userWeights []db.Weight) {
	<table class="me-0 ms-auto">
		<thead>
			<tr>
				<th scope="col" class="py-3 ps-6">
					Peso
				</th>
				<th scope="col" class="py-3 ps-6">
					Fecha
				</th>
				<th scope="col" class=""></th>
			</tr>
		</thead>
		<tbody>
			for _, userWeight:= range userWeights {
				@UserWeightsTableRow(userWeight)
			}
		</tbody>
	</table>
}

func weightRowId(weightID int64, isDefinition bool) string {
	if isDefinition {
		return fmt.Sprintf("weight_row_%d", weightID)
	}
	return fmt.Sprintf("#weight_row_%d", weightID)
}

templ UserWeightsTableRow(userWeight db.Weight) {
	<tr id={ weightRowId(userWeight.ID, true) } class="border-b bg-white">
		<td scope="row" class="whitespace-nowrap px-6 py-4 font-medium text-gray-900">
			{ utils.ToUIFloat(userWeight.Weight) }
		</td>
		<td class="px-6 py-4">{ utils.ToUIDate(userWeight.Date) }</td>
		<td class="w-10">
			<button
				class="rounded-full p-2 text-red-600 hover:bg-red-300"
				hx-trigger="click once"
				hx-confirm="Estas seguro de eliminar?"
				hx-delete={ fmt.Sprintf("/users/%d/weights/%d", userWeight.UserID, userWeight.ID) }
				hx-target="#user_weights"
				hx-swap="outerHTML"
			>
				<img src="/dist/trash.svg"/>
			</button>
		</td>
	</tr>
}
